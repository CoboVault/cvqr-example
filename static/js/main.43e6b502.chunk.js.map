{"version":3,"sources":["Components/Encoder/index.tsx","Components/Decoder/index.tsx","Components/Decoder/Progress.tsx","Components/BaseQRCode.tsx","Components/AnimatedQRCode/index.tsx","Components/DataTypeSelector/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Encoder","currentDataType","useContext","DataTypeContext","useState","data","setData","qrData","setQrData","console","log","useEffect","V2","constructQRCode","Buffer","from","toString","e","className","value","onChange","target","cols","rows","Decoder","urCodes","setURCodes","clear","decoderIsOpen","setDecoderOpen","onClick","onScan","ur","extractSingleWorkload","index","total","length","alert","find","item","newCodes","extractQRCode","map","i","processURQRCode","delay","style","width","onError","progress","Progress","BaseQRCode","size","ecl","level","AnimatedQRCode","refreshSpeed","showIndicator","setIndex","splitArray","subscribe","interval","unsubscribe","flexDirection","alignItems","justifyContent","marginLeft","marginRight","textAlign","AnimatedQRCodeV2","props","toUpperCase","React","createContext","DataTypeSelector","dataType","setDataType","Provider","children","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43e6b502.chunk.js","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport '../../styles/index.scss';\nimport {AnimatedQRCodeV2} from '../AnimatedQRCode';\nimport {V2} from '@cvbb/qr-protocol/dist';\nimport {DataTypeContext} from '../DataTypeSelector';\n\nexport const Encoder = () => {\n  const currentDataType = useContext(DataTypeContext);\n  const [data, setData] = useState('');\n  const [qrData, setQrData] = useState<string[]>([]);\n  console.log(currentDataType);\n  useEffect(() => {\n    try {\n      setQrData(\n        V2.constructQRCode(Buffer.from(data, currentDataType).toString('hex')),\n      );\n    } catch (e) {\n      setQrData([]);\n    }\n  }, [data, currentDataType]);\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <textarea\n          value={data}\n          onChange={(e) => {\n            setData(e.target.value);\n          }}\n          cols={50}\n          rows={20}\n        />\n      </div>\n      <div className=\"col\">\n        <p>UR</p>\n        <AnimatedQRCodeV2 data={qrData} />\n      </div>\n    </div>\n  );\n};\n","import React, {useContext, useEffect, useState} from 'react';\nimport QrReader from 'react-qr-scanner';\nimport '../../styles/index.scss';\nimport {extractSingleWorkload} from '@cvbb/bc-ur/dist';\nimport {V2} from '@cvbb/qr-protocol/dist';\n\nimport {Progress} from './Progress';\nimport {DataTypeContext} from '../DataTypeSelector';\n\nexport interface URQRCodeData {\n  total: number;\n  index: number;\n  data: string;\n}\n\nexport const Decoder = () => {\n  const currentDataType = useContext(DataTypeContext);\n  const [data, setData] = useState('');\n  const [urCodes, setURCodes] = useState<URQRCodeData[]>([]);\n\n  const clear = () => {\n    setURCodes([]);\n  };\n\n  const processURQRCode = (ur: string) => {\n    try {\n      const [index, total] = extractSingleWorkload(ur);\n      if (urCodes.length > 0) {\n        const currentTotal = urCodes[0].total;\n        if (total !== currentTotal) {\n          clear();\n          alert('invalid animated QRCode');\n        }\n      }\n      if (!urCodes.find((item) => item.index === index)) {\n        const newCodes = [...urCodes, {index, total, data: ur}];\n        setURCodes(newCodes);\n        if (newCodes.length === total) {\n          setData(\n            Buffer.from(\n              V2.extractQRCode(newCodes.map((i) => i.data)),\n              'hex',\n            ).toString(currentDataType),\n          );\n          clear();\n        }\n      }\n    } catch (e) {\n      clear();\n      alert('invalid animated QRCode');\n    }\n  };\n\n  const [decoderIsOpen, setDecoderOpen] = useState(false);\n\n  useEffect(() => {\n    if (!decoderIsOpen) {\n      clear();\n    }\n  }, [decoderIsOpen]);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <textarea value={data} onChange={(e) => {}} cols={50} rows={20} />\n      </div>\n      <div className=\"col\">\n        <button\n          onClick={() => setDecoderOpen((decoderIsOpen) => !decoderIsOpen)}>\n          {decoderIsOpen ? '关闭解码' : '开启解码'}\n        </button>\n        {decoderIsOpen && (\n          <QrReader\n            onScan={(data: any) => {\n              if (data) {\n                console.log(data);\n                processURQRCode(data);\n              }\n            }}\n            delay={100}\n            style={{width: 250}}\n            onError={(e) => {\n              console.log(e);\n            }}\n          />\n        )}\n        {urCodes[0] && urCodes[0].total > 1 && (\n          <Progress progress={urCodes.length} total={urCodes[0].total} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, {FunctionComponent} from 'react';\n\ntype Props = {\n    progress: number;\n    total: number;\n};\n\nexport const Progress: FunctionComponent<Props> = ({progress, total}) => {\n    return <p>{`${progress} / ${total}`}</p>;\n};\n","import React from \"react\";\n// @ts-ignore\nimport QRCode from \"qrcode.react\";\n\nexport const BaseQRCode = ({\n  size = 200,\n  data = \"\",\n  ecl = \"L\",\n}: {\n  data: string;\n  size?: number;\n  ecl?: \"L\" | \"M\" | \"Q\" | \"H\";\n}) => {\n  return <QRCode value={data} size={size} level={ecl} />;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { interval } from \"rxjs\";\nimport { BaseQRCode } from \"../BaseQRCode\";\nimport { AnimatedQRDataTypeV1 } from \"@cvbb/qr-protocol/dist\";\n\nconst AnimatedQRCode = ({\n  data,\n  refreshSpeed = 800,\n  size = 250,\n  showIndicator = true,\n}: {\n  data: string[];\n  refreshSpeed?: number;\n  size?: number;\n  showIndicator?: boolean;\n}) => {\n  const [index, setIndex] = useState(0);\n  const splitArray = data;\n  useEffect(() => {\n    const subscribe = interval(refreshSpeed).subscribe(() => {\n      if (index >= splitArray.length - 1) {\n        setIndex(0);\n      } else {\n        setIndex(index + 1);\n      }\n    });\n    return () => {\n      subscribe.unsubscribe();\n    };\n  });\n\n  return (\n    <div\n      style={{\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <span style={{ marginLeft: \"auto\", marginRight: \"auto\" }}>\n        <BaseQRCode size={size} data={splitArray[index]} />\n      </span>\n      {showIndicator ? (\n        <p style={{ textAlign: \"center\" }}>\n          {index + 1}/{splitArray.length}\n        </p>\n      ) : null}\n    </div>\n  );\n};\n\nexport const AnimatedQRCodeV1 = (props: {\n  data: AnimatedQRDataTypeV1[];\n  refreshSpeed?: number;\n  size?: number;\n  showIndicator?: boolean;\n}) => {\n  return (\n    <AnimatedQRCode\n      {...props}\n      data={props.data.map((item) => JSON.stringify(item))}\n    />\n  );\n};\n\nexport const AnimatedQRCodeV2 = (props: {\n  data: string[];\n  refreshSpeed?: number;\n  size?: number;\n  showIndicator?: boolean;\n}) => {\n  return (\n    <AnimatedQRCode\n      {...props}\n      data={props.data.map((item) => item.toUpperCase())}\n    />\n  );\n};\n","import React, {FunctionComponent, useState} from 'react';\nimport '../../styles/index.scss'\n\ntype SupportDataType = 'hex' | 'utf-8' | 'base64'\n\nexport const DataTypeContext = React.createContext<SupportDataType>('hex');\nexport const DataTypeSelector: FunctionComponent = (props) => {\n    const [dataType, setDataType] = useState<SupportDataType>('hex');\n    return <div className=\"col\">\n        <div className=\"row\" style={{width: 300}}>\n            <button onClick={() => setDataType('hex')}>Hex</button>\n            <button onClick={() => setDataType('utf-8')}>utf8(JSON, String)</button>\n            <button onClick={() => setDataType('base64')}>Base64</button>\n        </div>\n        <p>Current Type: {dataType}</p>\n        <DataTypeContext.Provider value={dataType}>\n            {props.children}\n        </DataTypeContext.Provider>\n    </div>\n}\n","import React from 'react';\nimport './App.css';\nimport {Encoder} from './Components/Encoder';\nimport {Decoder} from './Components/Decoder';\nimport {DataTypeSelector} from './Components/DataTypeSelector';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DataTypeSelector>\n        <p>Encoder</p>\n        <Encoder />\n        <p>Decoder</p>\n        <Decoder />\n      </DataTypeSelector>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}