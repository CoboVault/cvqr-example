{"version":3,"sources":["Components/Encoder/index.tsx","Components/Decoder/index.tsx","Components/Decoder/Progress.tsx","Components/Decoder/utils.ts","Components/BaseQRCode.tsx","Components/AnimatedQRCode/index.tsx","Components/DataTypeSelector/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Encoder","currentDataType","useContext","DataTypeContext","useState","data","setData","qrData","setQrData","console","log","useEffect","V2","constructQRCode","Buffer","from","toString","e","className","value","onChange","target","cols","rows","Decoder","urCodes","setURCodes","psbt","setPsbt","clear","decoderIsOpen","setDecoderOpen","onClick","ps","parsePsbt","JSON","stringify","error","decodePSBT","onScan","ur","extractSingleWorkload","index","total","length","alert","find","item","newCodes","extractQRCode","map","i","processURQRCode","delay","style","width","onError","progress","Progress","bitcoinNetwork","coin","messagePrefix","bech32","bip32","public","private","pubKeyHash","scriptHash","wif","psbtString","bitcoin","fromHex","txBuffer","getTransaction","tx","fromBuffer","inputs","ins","each","psbtInput","witnessUtxo","nonWitnessUtxo","finalScriptWitness","finalScriptSig","bip32Derivation","partialSig","redeemScript","witnessScript","Error","inputScript","p2ms","out","outs","script","output","txId","hash","reverse","hdPath","masterFingerprint","path","pubkey","isMultiSign","signStatus","m","n","undefined","isFinalized","outputs","address","fromOutputScript","BaseQRCode","size","ecl","level","AnimatedQRCode","refreshSpeed","showIndicator","setIndex","splitArray","subscribe","interval","unsubscribe","flexDirection","alignItems","justifyContent","marginLeft","marginRight","textAlign","AnimatedQRCodeV2","props","toUpperCase","React","createContext","DataTypeSelector","dataType","setDataType","Provider","children","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cef5e65a.chunk.js","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport '../../styles/index.scss';\nimport {AnimatedQRCodeV2} from '../AnimatedQRCode';\nimport {V2} from '@cvbb/qr-protocol/dist';\nimport {DataTypeContext} from '../DataTypeSelector';\n\nexport const Encoder = () => {\n  const currentDataType = useContext(DataTypeContext);\n  const [data, setData] = useState('');\n  const [qrData, setQrData] = useState<string[]>([]);\n  console.log(currentDataType);\n  useEffect(() => {\n    try {\n      setQrData(\n        V2.constructQRCode(Buffer.from(data, currentDataType).toString('hex')),\n      );\n    } catch (e) {\n      setQrData([]);\n    }\n  }, [data, currentDataType]);\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <textarea\n          value={data}\n          onChange={(e) => {\n            setData(e.target.value);\n          }}\n          cols={50}\n          rows={20}\n        />\n      </div>\n      <div className=\"col\">\n        <p>UR</p>\n        <AnimatedQRCodeV2 data={qrData} />\n      </div>\n    </div>\n  );\n};\n","import React, {useContext, useEffect, useState} from 'react';\nimport QrReader from 'react-qr-scanner';\nimport '../../styles/index.scss';\nimport {extractSingleWorkload} from '@cvbb/bc-ur/dist';\nimport {V2} from '@cvbb/qr-protocol/dist';\n\nimport {Progress} from './Progress';\nimport {DataTypeContext} from '../DataTypeSelector';\nimport {parsePsbt} from \"./utils\";\n\nexport interface URQRCodeData {\n  total: number;\n  index: number;\n  data: string;\n}\n\nexport const Decoder = () => {\n  const currentDataType = useContext(DataTypeContext);\n  const [data, setData] = useState('');\n  const [urCodes, setURCodes] = useState<URQRCodeData[]>([]);\n  const [psbt, setPsbt] = useState('');\n\n  const clear = () => {\n    setURCodes([]);\n  };\n\n  const processURQRCode = (ur: string) => {\n    try {\n      const [index, total] = extractSingleWorkload(ur);\n      if (urCodes.length > 0) {\n        const currentTotal = urCodes[0].total;\n        if (total !== currentTotal) {\n          clear();\n          alert('invalid animated QRCode');\n        }\n      }\n      if (!urCodes.find((item) => item.index === index)) {\n        const newCodes = [...urCodes, {index, total, data: ur}];\n        setURCodes(newCodes);\n        if (newCodes.length === total) {\n          setData(\n            Buffer.from(\n              V2.extractQRCode(newCodes.map((i) => i.data)),\n              'hex',\n            ).toString(currentDataType),\n          );\n          clear();\n        }\n      }\n    } catch (e) {\n      clear();\n      setData(ur);\n    }\n  };\n\n  const [decoderIsOpen, setDecoderOpen] = useState(false);\n\n  useEffect(() => {\n    if (!decoderIsOpen) {\n      clear();\n    }\n  }, [decoderIsOpen]);\n\n  const decodePSBT = () => {\n    try {\n      if (data) {\n        const ps = parsePsbt(data);\n        setPsbt(JSON.stringify(ps));\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <textarea value={data} onChange={(e) => {}} cols={50} rows={20} />\n        <button\n          onClick={() => {\n            decodePSBT();\n          }}>\n          解析PSBT(Hex)\n        </button>\n        <textarea value={psbt} cols={50} rows={20}/>\n      </div>\n      <div className=\"col\">\n        <button\n          onClick={() => setDecoderOpen((decoderIsOpen) => !decoderIsOpen)}>\n          {decoderIsOpen ? '关闭解码' : '开启解码'}\n        </button>\n        {decoderIsOpen && (\n          <QrReader\n            onScan={(data: any) => {\n              if (data) {\n                processURQRCode(data);\n              }\n            }}\n            delay={100}\n            style={{width: 250}}\n            onError={(e) => {\n              console.log(e);\n            }}\n          />\n        )}\n        {urCodes[0] && urCodes[0].total > 1 && (\n          <Progress progress={urCodes.length} total={urCodes[0].total} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, {FunctionComponent} from 'react';\n\ntype Props = {\n    progress: number;\n    total: number;\n};\n\nexport const Progress: FunctionComponent<Props> = ({progress, total}) => {\n    return <p>{`${progress} / ${total}`}</p>;\n};\n","import * as bitcoin from 'bitcoinjs-lib';\n\nconst bitcoinNetwork = {\n  coin: 'bitcoin',\n  messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n  bech32: 'bc',\n  bip32: {\n    public: 0x0488b21e,\n    private: 0x0488ade4,\n  },\n  pubKeyHash: 0x00,\n  scriptHash: 0x05,\n  wif: 0x80,\n};\n\nexport const parsePsbt = (psbtString: string) => {\n  const psbt = bitcoin.Psbt.fromHex(psbtString);\n  const txBuffer = psbt.data.getTransaction();\n  const tx = bitcoin.Transaction.fromBuffer(txBuffer);\n  const inputs = tx.ins.map((each, index) => {\n    const psbtInput = psbt.data.inputs[index];\n    const {\n      witnessUtxo,\n      nonWitnessUtxo,\n      finalScriptWitness,\n      finalScriptSig,\n      bip32Derivation,\n      partialSig,\n      redeemScript,\n      witnessScript,\n    } = psbtInput;\n    if (!bip32Derivation) {\n      throw new Error('invalid psbt, no bip32Derivation found');\n    }\n    if (!nonWitnessUtxo && !witnessUtxo) {\n      throw new Error('invalid psbt, no utxo found');\n    }\n    let value = 0;\n    let inputScript = null;\n    let p2ms = null;\n    if (redeemScript) {\n      inputScript = redeemScript;\n    }\n    if (witnessScript) {\n      inputScript = witnessScript;\n    }\n    if (nonWitnessUtxo) {\n      const transaction = bitcoin.Transaction.fromBuffer(nonWitnessUtxo);\n      const out = transaction.outs[each.index];\n      value = out.value;\n      if (!inputScript) {\n        inputScript = out.script;\n      }\n    }\n    if (witnessUtxo) {\n      value = witnessUtxo.value;\n      if (!inputScript) {\n        inputScript = witnessUtxo.script;\n      }\n    }\n\n    try {\n      // @ts-ignore\n      p2ms = bitcoin.payments.p2ms({output: inputScript});\n    } catch (e) {\n      // @ts-ignore\n    }\n\n    return {\n      txId: each.hash.reverse().toString('hex'),\n      index: each.index,\n      value,\n      hdPath: bip32Derivation.map((item) => {\n        return {\n          masterFingerprint: item.masterFingerprint.toString('hex'),\n          path: item.path,\n          pubkey: item.pubkey.toString('hex'),\n        };\n      }),\n      isMultiSign: !!p2ms,\n      signStatus: p2ms\n        ? `${partialSig ? partialSig.length : 0}-${p2ms.m}-${p2ms.n}`\n        : undefined,\n      isFinalized: !!finalScriptSig || !!finalScriptWitness,\n    };\n  });\n  const outputs = tx.outs.map((each, index) => {\n    const address = bitcoin.address.fromOutputScript(\n      each.script,\n      bitcoinNetwork,\n    );\n    const bip32Derivation = psbt.data.outputs[index].bip32Derivation;\n    const eachOutput = each as bitcoin.TxOutput;\n    const value = eachOutput.value;\n    return {\n      address,\n      value,\n      hdPath:\n        bip32Derivation &&\n        bip32Derivation.map((item) => {\n          return {\n            masterFingerprint: item.masterFingerprint.toString('hex'),\n            path: item.path,\n            pubkey: item.pubkey.toString('hex'),\n          };\n        }),\n    };\n  });\n  return {\n    inputs,\n    outputs,\n  };\n};\n","import React from \"react\";\n// @ts-ignore\nimport QRCode from \"qrcode.react\";\n\nexport const BaseQRCode = ({\n  size = 200,\n  data = \"\",\n  ecl = \"L\",\n}: {\n  data: string;\n  size?: number;\n  ecl?: \"L\" | \"M\" | \"Q\" | \"H\";\n}) => {\n  return <QRCode value={data} size={size} level={ecl} />;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { interval } from \"rxjs\";\nimport { BaseQRCode } from \"../BaseQRCode\";\nimport { AnimatedQRDataTypeV1 } from \"@cvbb/qr-protocol/dist\";\n\nconst AnimatedQRCode = ({\n  data,\n  refreshSpeed = 800,\n  size = 250,\n  showIndicator = true,\n}: {\n  data: string[];\n  refreshSpeed?: number;\n  size?: number;\n  showIndicator?: boolean;\n}) => {\n  const [index, setIndex] = useState(0);\n  const splitArray = data;\n  useEffect(() => {\n    const subscribe = interval(refreshSpeed).subscribe(() => {\n      if (index >= splitArray.length - 1) {\n        setIndex(0);\n      } else {\n        setIndex(index + 1);\n      }\n    });\n    return () => {\n      subscribe.unsubscribe();\n    };\n  });\n\n  return (\n    <div\n      style={{\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <span style={{ marginLeft: \"auto\", marginRight: \"auto\" }}>\n        <BaseQRCode size={size} data={splitArray[index]} />\n      </span>\n      {showIndicator ? (\n        <p style={{ textAlign: \"center\" }}>\n          {index + 1}/{splitArray.length}\n        </p>\n      ) : null}\n    </div>\n  );\n};\n\nexport const AnimatedQRCodeV1 = (props: {\n  data: AnimatedQRDataTypeV1[];\n  refreshSpeed?: number;\n  size?: number;\n  showIndicator?: boolean;\n}) => {\n  return (\n    <AnimatedQRCode\n      {...props}\n      data={props.data.map((item) => JSON.stringify(item))}\n    />\n  );\n};\n\nexport const AnimatedQRCodeV2 = (props: {\n  data: string[];\n  refreshSpeed?: number;\n  size?: number;\n  showIndicator?: boolean;\n}) => {\n  return (\n    <AnimatedQRCode\n      {...props}\n      data={props.data.map((item) => item.toUpperCase())}\n    />\n  );\n};\n","import React, {FunctionComponent, useState} from 'react';\nimport '../../styles/index.scss'\n\ntype SupportDataType = 'hex' | 'utf-8' | 'base64'\n\nexport const DataTypeContext = React.createContext<SupportDataType>('hex');\nexport const DataTypeSelector: FunctionComponent = (props) => {\n    const [dataType, setDataType] = useState<SupportDataType>('hex');\n    return <div className=\"col\">\n        <div className=\"row\" style={{width: 300}}>\n            <button onClick={() => setDataType('hex')}>Hex</button>\n            <button onClick={() => setDataType('utf-8')}>utf8(JSON, String)</button>\n            <button onClick={() => setDataType('base64')}>Base64</button>\n        </div>\n        <p>Current Type: {dataType}</p>\n        <DataTypeContext.Provider value={dataType}>\n            {props.children}\n        </DataTypeContext.Provider>\n    </div>\n}\n","import React from 'react';\nimport './App.css';\nimport {Encoder} from './Components/Encoder';\nimport {Decoder} from './Components/Decoder';\nimport {DataTypeSelector} from './Components/DataTypeSelector';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DataTypeSelector>\n        <p>Encoder</p>\n        <Encoder />\n        <p>Decoder</p>\n        <Decoder />\n      </DataTypeSelector>\n      <div>\n        <span className=\"copyleft\">&copy;</span>\n        <span>Cobo Vault Team</span>\n      </div>\n      <p>Donation: 3Kd5rjiLtvpHv5nhYQNTTeRLgrz4om32PJ</p>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}